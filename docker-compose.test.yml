version: "3.2"
services:
  #db: use Maria DB as our backend DB
  db:
    image: mariadb:10.3.22
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /secret/password
    volumes:
      # anonymous volume, for non persistent data
      #- type: volume
      #  target: /var/lib/mysql
      - type: bind
        source: ./mysql/data
        target: /var/lib/mysql
      - type: bind
        source: ./mysql/init
        target: /docker-entrypoint-initdb.d
      - type: bind
        source: ./mysql/conf.d/my-noencrypt.cnf
        target: /etc/mysql/conf.d/my.cnf
      - type: bind
        source: ./mysql/key
        target: /key
      - type: bind
        source: ./mysql/password
        target: /secret/password
  #/db

  # include ArrangoDB for AB definitions
  arangodb:
    image: arangodb
    ports:
      - "8529:8529"
    environment:
      ARANGO_ROOT_PASSWORD: "r00t"
    volumes:
      # anonymous volume, for non persistent data
      - type: volume
        target: /var/lib/arangodb3
      # anonymous volume, for non persistent data
      - type: volume
        target: /var/lib/arangodb3-apps

  #api_sails: the AppBuilder Developer Container
  api_sails:
    image: skipdaddy/install-ab:developer_v2
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    ports:
      - "1337:1337"
      - "9229:9229"
    environment:
      - COTE_DISCOVERY_REDIS_HOST=redis
    volumes:
      - type: bind
        source: ./app
        target: /app
      - type: bind
        source: ./config/local.js
        target: /app/config/local.js
      - type: bind
        source: ./data
        target: /app/data
      - type: bind
        source: ./developer/app_builder
        target: /app/node_modules/app_builder
      - type: bind
        source: ./developer/appdev-core
        target: /app/node_modules/appdev-core
      - type: bind
        source: ./developer/appdev-opsportal
        target: /app/node_modules/appdev-opsportal
    # use app_cli.js when you need to connect to the cli of the container
    # and then run setup on a sub module. This is especially useful when
    # sails is crashing and won't let you connect.
    # command: ["node", "app_cli.js"]
    command: ["node", "--inspect", "--max-old-space-size=2048", "--stack-size=2048", "app_waitForMySql.js"]
  #/api_sails

  #redis: use redis to allow cote services to find each other across a swarm
  redis:
    image: redis
    #ports:
    #  - 6379:6379
    volumes:
      - type: bind
        source: ./redis/data
        target: /data
    command: redis-server --appendonly yes
  #/redis

  #notification_email
  notification_email:
    image: node
    # ports:
      # - "9229:9229"
    environment:
      - COTE_DISCOVERY_REDIS_HOST=redis
    volumes:
      - type: bind
        source: ./developer/notification_email
        target: /app
      - type: bind
        source: ./config/local.js
        target: /app/config/local.js
    depends_on:
      - redis
    working_dir: /app
    # command: [ "node", "--inspect-brk=0.0.0.0:9229", "app.js" ]
    command: [ "node", "app.js" ]
  #/notification_email

  #process_manager: (AppBuilder) a micro service to manage our process tasks
  process_manager:
    image: node
    # ports:
    #   - "9229:9229"
    environment:
      - COTE_DISCOVERY_REDIS_HOST=redis
    volumes:
      - type: bind
        source: ./developer/process_manager
        target: /app
      - type: bind
        source: ./config/local.js
        target: /app/config/local.js
    depends_on:
      - redis
    working_dir: /app
    # command: [ "node", "--inspect-brk=0.0.0.0:9229", "app.js" ]
    command: [ "node", "app.js" ]
  #/process_manager
